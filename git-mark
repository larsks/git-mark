#!/bin/bash

OPT_MARK=$(git config --get mark.default || echo 'WIP')
OPT_FORCE=0

# apply mark to specified commits
git_mark() {
	git filter-branch -f --msg-filter \
		'sed "1 { /^\['"$OPT_MARK"'] /! s/^/['"$OPT_MARK"'] / }"' \
		$1
}

# remove mark from specified commits
git_unmark() {
	git filter-branch -f --msg-filter \
		'sed "1 s/^\['"$OPT_MARK"'] //"' $1
}

# check if the specified range of commits includes any
# merge commits (which can cause unexpected behavior with
# git-filter-branch)
has_merge () {
	local rev

	for rev in $(git rev-list $1); do
		if (( $(git rev-list --no-walk --count --merges $rev) )); then
			echo "ERROR: $rev is a merge commit" >&2
			return 0
		fi
	done

	return 1
}

# show usage message
usage() {
	local exe=${0##*/}
	echo "$0: usage: $exe [-m <mark>] [-f] [commits]"
}

######################################################################

while getopts 'hfm:' ch; do
	case $ch in
	(m)	OPT_MARK=$OPTARG
		;;
	(f)	OPT_FORCE=1
		;;

	(h)	usage
		exit 0
		;;

	(\?)	usage >&2
		exit 2
		;;
	esac
done
shift $(( $OPTIND - 1 ))

rev=${1:-"HEAD^.."}
shift

set -eu

cd $(git rev-parse --show-toplevel)

if ! git rev-list $rev > /dev/null; then
	echo "ERROR: failed to parse commits" >&2
	exit 1
fi

if has_merge "$rev" && [[ $OPT_FORCE != 1 ]]; then
	echo "ERROR: range contains a merge commit." \
		"Use -f if you really mean it." >&2
	exit 1
fi

case $0 in
	(*git-mark)	git_mark "$rev";;
	(*git-unmark)	git_unmark "$rev";;
	(*)		echo "ERROR: don't know what to do." >&2
			exit 1
			;;
esac

git log --oneline --no-decorate $rev
